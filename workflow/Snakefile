## Imports:
import os
import pandas as pd
from pathlib import Path
from typing import List

# check if param --config-file is set 
configfile: "config/config.yaml" 

# Check if verbose is set
verbose = config["verbose"]

# Check for all paths in config file if they are set or exist and set them to default if not
illumina_samples = Path(config["illumina_samples"])

nanopore_sampels = Path(config["nanopore_samples"])

if not (illumina_samples.is_dir() or nanopore_sampels.is_dir()):
    raise IOError("Illumina and Nanopore samples directory does not exist! \
                Make sure, one of the folders configures in the `cconfig.yaml` \
                file exists and contains samples!")

results_dir = Path(config["results"])
if results_dir == "" or results_dir == None:
    if verbose:
        print("== Result dir not set in config - will be set to default path `./results`!")
    results_dir = Path("./results")
results_dir.mkdir(parents=True, exist_ok=True)

envs_dir = Path(config["envs_dir"])
if envs_dir == "" or envs_dir == None:
    if verbose:
        print("== Env dir not set in config - will be set to default path `../envs`!")
    envs_dir = Path("../envs")

# Define subdirectories
benchmark_dir = Path(results_dir / "benchmark")
benchmark_dir.mkdir(parents=True, exist_ok=True)
log_dir = Path(results_dir / "logs")
log_dir.mkdir(parents=True, exist_ok=True)


# Load illumina samples by scanning the directory for fastq files and use the sample name as index column and the file path as calues in the dataframe, differentiationg between R1 and R2
# def dir_to_sample_df(dir: Path, pairwise: bool) -> pd.DataFrame:
#     list_of_files: List[Path] = [f for f in dir.glob("*.fastq.gz") if f.is_file()]
#     sample_df: pd.DataFrame = pd.DataFrame()
#     sample_df["sample"] = [f.stem.split(".")[0] for f in list_of_files]
#     if pairwise:
#         sample_df["R1"] = [str(f) for f in list_of_files if ".R1." in str(f)]
#         sample_df["R2"] = [str(f) for f in list_of_files if ".R2." in str(f)]
#     else:
#         sample_df["R1"] = [str(f) for f in list_of_files]
#     return sample_df.set_index("sample")

# illumina_samples_df = dir_to_sample_df(illumina_samples, pairwise=True)
# nanopore_samples_df = dir_to_sample_df(nanopore_sampels, pairwise=False)

# Include rule files:
include: os.path.join("rules", "qc.smk")
include: os.path.join("rules", "mapping.smk")
include: os.path.join("rules", "variant_calling.smk")

# Rule all
rule all:
    input: 
        #"output/qc/clean_reads.R1.fastq.gz"
        "output/qc/nanoplot/raw/NanoPlot-report.html"

        
        # os.path.join(results_dir, "qc_summary", "fastp_summary") if run_qc_wgs else [],
        # os.path.join(results_dir, "qc_summary", "fastp_summary") if run_assembly else [],
        # contigs, # from assembly
        # os.path.join(results_dir, "qc_summary", "RNA-seq", "fastp_summary") if run_qc_rna_seq else [],
        # os.path.join(results_dir, "qc_summary", "RNA-seq", "qualimap_summary") if run_qc_mapping else [],
        # os.path.join(results_dir, "dge_analysis", "dge_results.tsv") if run_dge_analysis else [],
        # os.path.join(results_dir, "fasta", "genes") if run_phylogenetic_comparison else [],        
        # expand(os.path.join(results_dir, "annotation", "{sample}"), sample = assembly_samples.index) if run_assembly else [],
        # os.path.join(config["results"], "tree", "tree_plot.pdf") if run_phylogenetic_comparison else [],