## Imports:
import os
import pandas as pd
from pathlib import Path
from typing import List

# check if param --config-file is set 
configfile: "config/config.yaml" 

# Check if verbose is set
verbose = config["verbose"]

# Check for all paths in config file if they are set or exist and set them to default if not
illumina_samples = Path(config["illumina_samples"])
nanopore_sampels = Path(config["nanopore_samples"])
primer_illumina = Path(config["primer_illumina"])
primer_nanopore = Path(config["primer_nanopore"])
reference_genome = Path(config["ref"])

if not (illumina_samples.is_dir() or nanopore_sampels.is_dir()):
    raise IOError("Illumina and Nanopore samples directory does not exist! \
                Make sure, one of the folders configures in the `config.yaml` \
                file exists and contains samples!")

results_dir = Path(config["results"])
if results_dir == "" or results_dir == None:
    if verbose:
        print("== Result dir not set in config - will be set to default path `./results`!")
    results_dir = Path("./results")
results_dir.mkdir(parents=True, exist_ok=True)

envs_dir = Path(config["envs_dir"])
if envs_dir == "" or envs_dir == None:
    if verbose:
        print("== Env dir not set in config - will be set to default path `../envs`!")
    envs_dir = Path("../envs")

# Define subdirectories
benchmark_dir = Path(results_dir / "benchmark")
benchmark_dir.mkdir(parents=True, exist_ok=True)
log_dir = Path(results_dir / "log")
log_dir.mkdir(parents=True, exist_ok=True)


def dir_to_sample_df(dir: Path, pairwise: bool) -> pd.DataFrame:
# Load illumina samples by scanning the directory for fastq files and use the sample name as index column and the file path as values in the dataframe, differentiating between R1 and R2
    list_of_files: List[Path] = [f for f in dir.glob("*.fastq.gz") if f.is_file()]
    sample_df: pd.DataFrame = pd.DataFrame()
    if pairwise:
        sample_df["R1"] = [str(f) for f in list_of_files if ".R1." in str(f)]
        sample_df["R2"] = [str(f) for f in list_of_files if ".R2." in str(f)]
    else:
        sample_df["R1"] = [str(f) for f in list_of_files]
    sample_df["sample"] = [Path(f).stem.split(".")[0] for f in sample_df["R1"]]
    return sample_df.set_index("sample")

illumina_samples_df = dir_to_sample_df(illumina_samples, pairwise=True)
print(illumina_samples_df)
nanopore_samples_df = dir_to_sample_df(nanopore_sampels, pairwise=False)
print(nanopore_samples_df)


# Rule all
# TODO: adjust to use wildcards for all samples and all primer combinations in EVERY rule, so no hard-coded stuff
# This will also lead to a nice DAG overview of the whole pipeline
rule all:
    input: 
        expand(results_dir / "qc/{sample}_fastp.html", sample = illumina_samples_df.index),
        expand(results_dir / "qc/nanoplot/raw/{sample}", sample = nanopore_samples_df.index),
        expand(results_dir / "qc/{sample}_clean_reads.fastq.gz", sample = nanopore_samples_df.index),
        expand(results_dir / "mapping/minimap2-{sample}.sam", sample = illumina_samples_df.index),
        expand(results_dir / "mapping/minimap2-{sample}.sam", sample = nanopore_samples_df.index),
        expand(results_dir / "mapping/minimap2-{sample}.sorted.bam.bai", sample = illumina_samples_df.index),
        expand(results_dir / "mapping/minimap2-{sample}.sorted.bam.bai", sample = nanopore_samples_df.index),
        expand(results_dir / "stats/minimap2-{sample}_flagstat.txt", sample = illumina_samples_df.index),
        expand(results_dir / "qualimap/{sample}/qualimapReport.html", sample=list(illumina_samples_df.index)+list(nanopore_samples_df.index)),
        expand(results_dir / "primer_scheme/converted-{sample}.bedpe", sample=list(illumina_samples_df.index)+list(nanopore_samples_df.index)),
        expand(results_dir / "primer_scheme/corrected-{sample}.bedpe", sample=list(illumina_samples_df.index)+list(nanopore_samples_df.index)),
        expand(results_dir / "primer_clipping/minimap2-{sample}.sorted.primerclipped.bam", sample=list(illumina_samples_df.index)+list(nanopore_samples_df.index)),
        expand(results_dir / "variant_calling" / "freebayes-illumina.vcf"),
        expand(results_dir / "variant_calling" / "medaka-nanopore.vcf"),
        expand(results_dir / "consensus" / "{sample}.vcf.gz", sample=list(illumina_samples_df.index)+list(nanopore_samples_df.index)),
        expand(results_dir / "consensus/{sample}_consensus.fasta", sample=list(illumina_samples_df.index)+list(nanopore_samples_df.index)),
        results_dir / "consensus/lineage.csv",
        expand(results_dir / "qc/president/{sample}_report.tsv", sample=list(illumina_samples_df.index)+list(nanopore_samples_df.index)),

# Include rule files:
include: os.path.join("rules", "qc.smk")
include: os.path.join("rules", "mapping.smk")
include: os.path.join("rules", "read_statistics.smk")
include: os.path.join("rules", "primer_clipping.smk")
include: os.path.join("rules", "variant_calling.smk")
include: os.path.join("rules", "consensus.smk")