## Imports:
import pandas as pd
import os
from pathlib import Path

# check if param --config-file is set and overwrite configfile
configfile: "config/config.yaml"
if snakemake.params.config_file != None:
    configfile: snakemake.params.config_file

# Check if verbose is set
verbose = config["verbose"]

# Check for all paths in config file if they are set or exist and set them to default if not
illumina_samples = Path(config["illumina_samples"])

nanopore_sampels = Path(config["nanopore_samples"])

if not (illumina_samples.is_dir() or nanopore_sampels.is_dir()):
    raise IOError("Illumina and Nanopore samples directory does not exist! \
                Make sure, one of the folders configures in the `cconfig.yaml` \
                file exists and contains samples!")

results_dir = Path(config["results"])
if results_dir == "" or results_dir == None:
    if verbose:
        print("== Result dir not set in config - will be set to default path `./results`!")
    results_dir = Path("./results")
results.mkdir(parents=True, exist_ok=True)

if verbose: 
    print("== Using config file: {}".format(configfile))

envs_dir = Path(config["envs_dir"])
if envs_dir == "" or envs_dir == None:
    if verbose:
        print("== Env dir not set in config - will be set to default path `../envs`!")
    envs_dir = Path("../envs")

# Define subdirectories
benchmark_dir = Path(results_dir / "benchmark")
benchmark_dir.mkdir(parents=True, exist_ok=True)
log_dir = Path(results_dir / "logs")
log_dir.mkdir(parents=True, exist_ok=True)


# Include rule files:
include: os.path.join("rules", "screen.smk")
include: os.path.join("rules", "qc.smk")
include: os.path.join("rules", "mapping.smk")
include: os.path.join("rules", "variant_calling.smk")



# define inputs
if doPolishing:
    contigs = expand(os.path.join(results_dir, "polish_contigs", "{sample}_polished_contigs.fasta"), sample = assembly_samples.index)
else:
    if run_assembly:
        contigs = expand(os.path.join(results_dir, "assembly", "{sample}", "{sample}_contigs.fasta"), sample=assembly_samples.index)
    else:
        contigs = []

# Rule all
rule all:
    input: 
        "output/qc/illumina_R1_fastqc.html"

        
        # os.path.join(results_dir, "qc_summary", "fastp_summary") if run_qc_wgs else [],
        # os.path.join(results_dir, "qc_summary", "fastp_summary") if run_assembly else [],
        # contigs, # from assembly
        # os.path.join(results_dir, "qc_summary", "RNA-seq", "fastp_summary") if run_qc_rna_seq else [],
        # os.path.join(results_dir, "qc_summary", "RNA-seq", "qualimap_summary") if run_qc_mapping else [],
        # os.path.join(results_dir, "dge_analysis", "dge_results.tsv") if run_dge_analysis else [],
        # os.path.join(results_dir, "fasta", "genes") if run_phylogenetic_comparison else [],        
        # expand(os.path.join(results_dir, "annotation", "{sample}"), sample = assembly_samples.index) if run_assembly else [],
        # os.path.join(config["results"], "tree", "tree_plot.pdf") if run_phylogenetic_comparison else [],